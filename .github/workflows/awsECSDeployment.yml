name: Deploy to Amazon ECS

on: [push]
  # workflow_run:
  #   workflows: ["Build and Push Docker Image"]
  #   branches: [main]
  #   types:
  #     - completed

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
  ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE_ARN }}
  ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER_ARN }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configuration of AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fetch ECS Task Definition from Parameter Store
        run: |
          TASK_DEFINITION=$(aws ssm get-parameter --name "foundingpathers-task-revision.json" --with-decryption --query Parameter.Value --output text)
          echo "$TASK_DEFINITION" > task-definition.json
          echo "ECS_TASK_DEFINITION=task-definition.json" >> $GITHUB_ENV

      - name: Log in to ECR
        id: ECR-login
        run: |
          ${{ secrets.AWS_ECR_LOGIN }}
      
      - name: Pull and tag images from CI Pipeline
        id: pull-and-tag-built-images
        run: |
          tag=("latest")
          images=("frontend" "backend")

          for image in "${images[@]}"; do
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/founding-pathers:${image}-${tag}
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/founding-pathers:${image}-${tag} ${{ env.ECR_REPOSITORY }}:${image}
            docker push ${{ env.ECR_REPOSITORY }}:${image}
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          done

      - name: Modify Amazon ECS task definition with frontend container
        id: render-frontend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: frontend
          image: ${{env.ECR_REPOSITORY}}:frontend

      - name: Modify Amazon ECS task definition with backend container
        id: render-backend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: backend
          image: ${{env.ECR_REPOSITORY}}:backend

      - name: Stop Existing ECS Task
        run: |
          CURRENT_TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} --desired-status RUNNING --query 'taskArns[0]' --output text)
          if [ -n "$CURRENT_TASK_ARN" ]; then
            aws ecs stop-task --cluster ${{ env.ECS_CLUSTER }} --task $CURRENT_TASK_ARN
          fi
    
      - name: Decrease Desired Count
        run: aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count 0
      
      - name: Deploy ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        id: deploy-ecs-task
        with:
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          task-definition: task-definition.json
      
      - name: Increase Desired Count
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --desired-count 1

      - name: Check if Previous Task Definition is Stable
        run: |
          while true; do
            if [ "${{ steps.deploy-ecs-task.outputs.stable }}" == 'true' ]; then
              echo "Previous task definition is stable. Ending workflow"
              break
            else
              echo "Previous task definition is not yet stable. Waiting..."
              sleep 30
            fi
          done
        
        

        